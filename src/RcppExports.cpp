// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fitpath
Rcpp::List fitpath(const arma::field<arma::mat>& x, const arma::field<arma::vec>& y, const std::string& family, const bool& local_search, const int& max_nnz, const double& lambda_step, arma::vec lambda, const double& alpha, const bool& intercept, const bool& random_intercept, const double& eps, const unsigned& max_cd_iter, const unsigned& max_ls_iter, const unsigned& max_bls_iter, const double& t_init, const double& t_scale, const unsigned& max_pql_iter, const bool& active_set, const unsigned& active_set_count, const bool& sort, const unsigned& screen);
RcppExport SEXP _glmmsel_fitpath(SEXP xSEXP, SEXP ySEXP, SEXP familySEXP, SEXP local_searchSEXP, SEXP max_nnzSEXP, SEXP lambda_stepSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP interceptSEXP, SEXP random_interceptSEXP, SEXP epsSEXP, SEXP max_cd_iterSEXP, SEXP max_ls_iterSEXP, SEXP max_bls_iterSEXP, SEXP t_initSEXP, SEXP t_scaleSEXP, SEXP max_pql_iterSEXP, SEXP active_setSEXP, SEXP active_set_countSEXP, SEXP sortSEXP, SEXP screenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const bool& >::type local_search(local_searchSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_nnz(max_nnzSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_step(lambda_stepSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const bool& >::type random_intercept(random_interceptSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type max_cd_iter(max_cd_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type max_ls_iter(max_ls_iterSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type max_bls_iter(max_bls_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type t_init(t_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type t_scale(t_scaleSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type max_pql_iter(max_pql_iterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type active_set(active_setSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type active_set_count(active_set_countSEXP);
    Rcpp::traits::input_parameter< const bool& >::type sort(sortSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type screen(screenSEXP);
    rcpp_result_gen = Rcpp::wrap(fitpath(x, y, family, local_search, max_nnz, lambda_step, lambda, alpha, intercept, random_intercept, eps, max_cd_iter, max_ls_iter, max_bls_iter, t_init, t_scale, max_pql_iter, active_set, active_set_count, sort, screen));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glmmsel_fitpath", (DL_FUNC) &_glmmsel_fitpath, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_glmmsel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
